




/*ChatClient.java*/
package chat_gui;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;
import chat_gui.ChatClientThread;
public class ChatClient implements Runnable{
private Socket socket=null;
BufferedReader console=null;
private DataOutputStream streamOut=null;
private ChatClientThread client=null;
private boolean done=false;
private String line="";
private Thread thread=null;
public ChatClient(String serverName, int serverPort){
try{
socket=new Socket(serverName,serverPort);//connect to a server using their know port
System.out.println("Got connected to socket:" + socket +" on port" + serverPort);
start();//we are streaming 
String line="";
while(!line.equalsIgnoreCase("bye")){
line = console.readLine();//read input
streamOut.writeUTF(line);
streamOut.flush();
}
}
catch(UnknownHostException uhe){System.out.println("Unknown Host: OOPS!" + uhe.getMessage());}
catch(IOException ioe){System.out.println("IO problem client: "+ioe.getMessage());}
}

public void start() throws IOException{
console= new BufferedReader(new InputStreamReader(System.in));
streamOut= new DataOutputStream(socket.getOutputStream());
if(thread== null){
client= new ChatClientThread(this, socket);
thread=new Thread(this);
thread.start();
}
}

@Override
public void run(){
while((thread != null)&&(!line.equalsIgnoreCase("bye"))){
try{
line=console.readLine();
streamOut.writeUTF(line);
streamOut.flush();
}catch(IOException ioe){
System.out.println("ERROR sending the message" + ioe.getMessage());
}
}
}
public void stop(){
done=true;//set flag to done
if(thread!=null){
thread=null;
}try{
if(console!=null) console.close();
if(streamOut!=null)streamOut.close();
if(client!=null) client=null;
if(socket!=null) socket.close();
}catch(IOException ioe){ System.out.println("Error closing..."+ioe.getMessage());}

}
public void handle(String msg) {
if(msg.equalsIgnoreCase("bye")){
line="bye";
stop();
}else{
System.out.println(msg);
}
}

}








/* ChatClientGUIA.java*/
package chat_gui;
import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.*;
import chat_server_client_4.ChatClientThread;
public class ChatClientGUIA extends Applet implements ActionListener, Runnable {
private Socket socket=null;
private DataInputStream streamIn=null;
private DataOutputStream streamOut=null;
private ChatClientThread client=null;
private TextArea display =new TextArea();
private TextField input=new TextField();
private Button send=new Button("Send");
private Button connect=new Button("Connect");
private Button quit=new Button("Bye");
private Button sendPrivate =new Button("Send Private");
private String serverName="localhost";
private int serverPort=8081;
Panel mainPanel=new Panel();
Panel keys=new Panel();
Panel south=new Panel();
private boolean done=true;
private String line="";

public void init(){
mainPanel.setLayout(new BorderLayout());
keys.setLayout(new GridLayout(1,2));
connect.setEnabled(true);
connect.addActionListener(this);
quit.addActionListener(this);
quit.setEnabled(false);

keys.add(quit);
keys.add(connect);
south.setLayout(new BorderLayout());
south.add("West", keys);
south.add("Center", input);
send.setEnabled(false);
send.addActionListener(this);
south.add("East", send);
Label title =new Label("Web Chat",Label.CENTER);
title.setFont(new Font("Helvetica",Font.BOLD,14));
mainPanel.add(title, BorderLayout.NORTH);
display.setEditable(false);
display.setBackground(Color.PINK);
mainPanel.add(display, BorderLayout.CENTER);
mainPanel.add(south, BorderLayout.SOUTH);
add(mainPanel);
}
public void open(){
try{
streamOut= new DataOutputStream(socket.getOutputStream());
streamIn = new DataInputStream(socket.getInputStream());
new Thread(this).start();
}catch(IOException ioe){ ioe.printStackTrace();}
}
public void run(){
try{
while(!done){
line=streamIn.readUTF();
displayOutput(line);
}
}catch(IOException ioe){
done=true;
displayOutput(ioe.getMessage());
}
}
public void actionPerformed(ActionEvent e){
String btnTxt=e.getActionCommand().trim();
if(btnTxt.equalsIgnoreCase("connect")){ connect(serverName, serverPort); System.out.println("connect button hit");}
else if(e.getSource()==quit) { disconnect(); System.out.println("quit button hit");}
else if (e.getSource()==send){ send(); System.out.println("send button hit");}
}
public void connect(String serverName,int serverPort){
done=false;
displayOutput("Connection time...."+"/n");
try{
socket= new Socket(serverName,serverPort);
displayOutput("Connected: "+socket);
open();
send.setEnabled(true);
connect.setEnabled(false);
}catch(UnknownHostException uhe){
displayOutput(uhe.getMessage());
done=true;
}catch(IOException ioe){
displayOutput(ioe.getMessage());
done=true;
}
}

public void disconnect(){
done=true;
input.setText("bye");
send();
quit.setEnabled(false);
connect.setEnabled(true);
send.setEnabled(false);
}
public void send(){
String msg=input.getText().trim();
try{
streamOut.writeUTF(msg);
streamOut.flush();
if(msg.equalsIgnoreCase("bye")){
}
}catch(IOException ioe){
displayOutput("Problem sending..."+ioe.getMessage());
close();
}
}

public void handle(String msg){
if(msg.equalsIgnoreCase("bye"));
displayOutput("GoodBYe");
close();
}
public void displayOutput(String msg){
display.append("\n"+msg+""
+ "\n ------");
}
private void close() {
done=true;
try{
if(streamOut!= null){ streamOut.close();}
if(socket!=null){socket.close();}
}catch(IOException ioe){
displayOutput("OOPS problem closing");
client.close();
client=null;
}
}
}







/*ChatGUI.java*/
package cafe;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
public class ChatGUI extends JFrame implements ActionListener, Runnable
{
private Socket socket = null;
private DataInputStream streamIn = null;
private DataOutputStream streamOut = null;
private ChatClientThread client = null; 
private JTextArea display = new JTextArea();
private JTextField input = new JTextField();
private JButton send = new JButton("Send"); 
private JButton connect = new JButton("Connect"); 
private JButton quit = new JButton("disconnect");
private JButton sendPrivate = new JButton("Send Private");
private String serverName = "localhost";
private JTextField users = new JTextField();
private int serverPort = 8081;
private boolean done = true;
private String line = "";
JPanel mainPanel = new JPanel(); 
JPanel keys = new JPanel(); 
JPanel south = new JPanel();

public ChatGUI()
{
mainPanel.setLayout(new BorderLayout());
keys.setLayout(new GridLayout(1,3));
connect.setEnabled(true);
keys.add(quit);
keys.add(connect);
keys.add(sendPrivate);
Label title =new Label("Web Chat",Label.CENTER);
title.setFont(new Font("Helvetica",Font.BOLD,14));
mainPanel.add(title, BorderLayout.NORTH);
south.setLayout(new BorderLayout());
south.add("West", keys);
south.add("Center", input);
send.setEnabled(false);
send.addActionListener(this);
connect.addActionListener(this);
quit.addActionListener(this);
sendPrivate.addActionListener(this);
display.setEditable(false);
display.setBackground(Color.PINK);
mainPanel.add(display,BorderLayout.CENTER);
mainPanel.add(south, BorderLayout.SOUTH);

south.add("East", send);
add(mainPanel);

}

public void open()
{
try{
streamOut = new DataOutputStream(socket.getOutputStream());
streamIn = new DataInputStream(socket.getInputStream());
new Thread(this).start();
}catch(IOException ioe)
{
ioe.printStackTrace();
}

}
@Override
public void run()
{
try {
while(!done)
{
line = streamIn.readUTF(); 
displayOutput(line);
}
}catch(IOException ioe)
{
done = true; 
displayOutput(ioe.getMessage());
}
}
public void connect(String serverName, int serverPort)
{
done = false; 
displayOutput("Connection time..");
try
{
socket = new Socket(serverName, serverPort);
displayOutput("Connected: " + socket);
open(); 
send.setEnabled(true);
quit.setEnabled(true);
connect.setEnabled(true);

}catch(UnknownHostException uhe)
{
displayOutput(uhe.getMessage()); 
done=true; 
}
catch(IOException ioe)
{
displayOutput(ioe.getMessage());
done=true; 
}
}
public void disconnect()
{
done=true; 
input.setText("disconnect");
send(); 
quit.setEnabled(false);
connect.setEnabled(true);
send.setEnabled(true);
}
public void send()
{
String msg= input.getText().trim();
try
{
streamOut.writeUTF(msg);
streamOut.flush();
if(msg.equalsIgnoreCase("disconnect"))
{
quit.setEnabled(false);
connect.setEnabled(false);
send.setEnabled(false);
close();

}
}catch(IOException ioe)
{
displayOutput("Problem sending.. " + ioe.getMessage());
close();
}
}
public void displayOutput(String msg)
{
display.append("\n" + msg + "\n-----");
}
public void close()
{
done = true; 
try
{
if(streamOut!=null)
{
streamOut.close();
}
if(socket!=null)
{
socket.close();
}
}catch(IOException ioe)
{
displayOutput("OOPS problem closing");
client.close(); 
client=null;
}

}
@Override
public void actionPerformed(ActionEvent e)
{
String btnTxt = e.getActionCommand().trim();
if(btnTxt.equalsIgnoreCase("connect"))
{
connect(serverName,serverPort);
System.out.println("Connect button hit");
}
else if(e.getSource() == quit)
{
disconnect();
System.out.println("quit button hit");
}
else if(e.getSource() == send )
{
send(); 
System.out.println("send button hit");
}

}

}





/*ChatServer.java*/
package chat_gui;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.Socket;
public class ChatClientThread extends Thread{
private Socket socket=null;
private ChatClient client=null;
private DataInputStream streamIn=null;
private boolean done=true;
public ChatClientThread(ChatClient _client, Socket _socket){
client= _client;
socket=_socket;
open();
start();
}
public void open(){
try{
streamIn=new DataInputStream(socket.getInputStream());
}catch(IOException ioe){
System.out.println("Errot getting input stream" + ioe.getLocalizedMessage());
client.stop();
}
}
@Override
public void run(){
done=false;
while(!done){
try{client.handle(streamIn.readUTF());
}catch(IOException ioe){
client.stop();
done=true;
}
}
}
public void close(){
try{
if(streamIn!=null){
streamIn.close();
}
}catch(IOException ioe){
client.stop();
done=true;
}
}
}
/*ChatClientThread.java*/
package chat_gui;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.Socket;
public class ChatClientThread extends Thread{
private Socket socket=null;
private ChatClient client=null;
private DataInputStream streamIn=null;
private boolean done=true;
public ChatClientThread(ChatClient _client, Socket _socket){
client= _client;
socket=_socket;
open();
start();
}
public void open(){
try{
streamIn=new DataInputStream(socket.getInputStream());
}catch(IOException ioe){
System.out.println("Errot getting input stream" + ioe.getLocalizedMessage());
client.stop();
}
}
@Override
public void run(){
done=false;
while(!done){
try{client.handle(streamIn.readUTF());
}catch(IOException ioe){
client.stop();
done=true;
}
}
}
public void close(){
try{
if(streamIn!=null){
streamIn.close();
}
}catch(IOException ioe){
client.stop();
done=true;
}
}
}
